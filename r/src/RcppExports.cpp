// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "arrow_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// Array__from_vector
std::shared_ptr<arrow::Array> Array__from_vector(SEXP x);
RcppExport SEXP _arrow_Array__from_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__from_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__Slice1
std::shared_ptr<arrow::Array> Array__Slice1(const std::shared_ptr<arrow::Array>& array, int offset);
RcppExport SEXP _arrow_Array__Slice1(SEXP arraySEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Slice1(array, offset));
    return rcpp_result_gen;
END_RCPP
}
// Array__Slice2
std::shared_ptr<arrow::Array> Array__Slice2(const std::shared_ptr<arrow::Array>& array, int offset, int length);
RcppExport SEXP _arrow_Array__Slice2(SEXP arraySEXP, SEXP offsetSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Slice2(array, offset, length));
    return rcpp_result_gen;
END_RCPP
}
// Array__IsNull
bool Array__IsNull(const std::shared_ptr<arrow::Array>& x, int i);
RcppExport SEXP _arrow_Array__IsNull(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__IsNull(x, i));
    return rcpp_result_gen;
END_RCPP
}
// Array__IsValid
bool Array__IsValid(const std::shared_ptr<arrow::Array>& x, int i);
RcppExport SEXP _arrow_Array__IsValid(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__IsValid(x, i));
    return rcpp_result_gen;
END_RCPP
}
// Array__length
int Array__length(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__length(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__offset
int Array__offset(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__offset(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__offset(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__null_count
int Array__null_count(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__null_count(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__null_count(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__type
std::shared_ptr<arrow::DataType> Array__type(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__type(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__type(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__ToString
std::string Array__ToString(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__ToString(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__ToString(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__type_id
arrow::Type::type Array__type_id(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__type_id(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__type_id(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__Equals
bool Array__Equals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs);
RcppExport SEXP _arrow_Array__Equals(SEXP lhsSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Equals(lhs, rhs));
    return rcpp_result_gen;
END_RCPP
}
// Array__ApproxEquals
bool Array__ApproxEquals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs);
RcppExport SEXP _arrow_Array__ApproxEquals(SEXP lhsSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__ApproxEquals(lhs, rhs));
    return rcpp_result_gen;
END_RCPP
}
// Array__data
std::shared_ptr<arrow::ArrayData> Array__data(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__data(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(Array__data(array));
    return rcpp_result_gen;
END_RCPP
}
// Array__RangeEquals
bool Array__RangeEquals(const std::shared_ptr<arrow::Array>& self, const std::shared_ptr<arrow::Array>& other, int start_idx, int end_idx, int other_start_idx);
RcppExport SEXP _arrow_Array__RangeEquals(SEXP selfSEXP, SEXP otherSEXP, SEXP start_idxSEXP, SEXP end_idxSEXP, SEXP other_start_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int >::type start_idx(start_idxSEXP);
    Rcpp::traits::input_parameter< int >::type end_idx(end_idxSEXP);
    Rcpp::traits::input_parameter< int >::type other_start_idx(other_start_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__RangeEquals(self, other, start_idx, end_idx, other_start_idx));
    return rcpp_result_gen;
END_RCPP
}
// Array__Mask
LogicalVector Array__Mask(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__Mask(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Mask(array));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryArray__indices
std::shared_ptr<arrow::Array> DictionaryArray__indices(const std::shared_ptr<arrow::DictionaryArray>& array);
RcppExport SEXP _arrow_DictionaryArray__indices(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DictionaryArray>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryArray__indices(array));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryArray__dictionary
std::shared_ptr<arrow::Array> DictionaryArray__dictionary(const std::shared_ptr<arrow::DictionaryArray>& array);
RcppExport SEXP _arrow_DictionaryArray__dictionary(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DictionaryArray>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryArray__dictionary(array));
    return rcpp_result_gen;
END_RCPP
}
// Array__as_vector
SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__as_vector(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(Array__as_vector(array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__as_vector
SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__as_vector(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__as_vector(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__to_dataframe
List RecordBatch__to_dataframe(const std::shared_ptr<arrow::RecordBatch>& batch, bool use_threads);
RcppExport SEXP _arrow_RecordBatch__to_dataframe(SEXP batchSEXP, SEXP use_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< bool >::type use_threads(use_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__to_dataframe(batch, use_threads));
    return rcpp_result_gen;
END_RCPP
}
// Table__to_dataframe
List Table__to_dataframe(const std::shared_ptr<arrow::Table>& table, bool use_threads);
RcppExport SEXP _arrow_Table__to_dataframe(SEXP tableSEXP, SEXP use_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    Rcpp::traits::input_parameter< bool >::type use_threads(use_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__to_dataframe(table, use_threads));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_type
std::shared_ptr<arrow::DataType> ArrayData__get_type(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_type(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_type(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_length
int ArrayData__get_length(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_length(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_null_count
int ArrayData__get_null_count(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_null_count(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_null_count(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_offset
int ArrayData__get_offset(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_offset(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_offset(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__buffers
List ArrayData__buffers(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__buffers(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__buffers(x));
    return rcpp_result_gen;
END_RCPP
}
// Buffer__is_mutable
bool Buffer__is_mutable(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__is_mutable(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(Buffer__is_mutable(buffer));
    return rcpp_result_gen;
END_RCPP
}
// Buffer__ZeroPadding
void Buffer__ZeroPadding(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__ZeroPadding(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buffer(bufferSEXP);
    Buffer__ZeroPadding(buffer);
    return R_NilValue;
END_RCPP
}
// Buffer__capacity
int64_t Buffer__capacity(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__capacity(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(Buffer__capacity(buffer));
    return rcpp_result_gen;
END_RCPP
}
// Buffer__size
int64_t Buffer__size(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__size(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(Buffer__size(buffer));
    return rcpp_result_gen;
END_RCPP
}
// r___RBuffer__initialize
std::shared_ptr<arrow::Buffer> r___RBuffer__initialize(SEXP x);
RcppExport SEXP _arrow_r___RBuffer__initialize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r___RBuffer__initialize(x));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__length
int ChunkedArray__length(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__length(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__length(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__null_count
int ChunkedArray__null_count(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__null_count(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__null_count(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__num_chunks
int ChunkedArray__num_chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__num_chunks(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__num_chunks(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__chunk
std::shared_ptr<arrow::Array> ChunkedArray__chunk(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int i);
RcppExport SEXP _arrow_ChunkedArray__chunk(SEXP chunked_arraySEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__chunk(chunked_array, i));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__chunks
List ChunkedArray__chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__chunks(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__chunks(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__type
std::shared_ptr<arrow::DataType> ChunkedArray__type(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__type(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__type(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkArray__Slice1
std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice1(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset);
RcppExport SEXP _arrow_ChunkArray__Slice1(SEXP chunked_arraySEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkArray__Slice1(chunked_array, offset));
    return rcpp_result_gen;
END_RCPP
}
// ChunkArray__Slice2
std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice2(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset, int length);
RcppExport SEXP _arrow_ChunkArray__Slice2(SEXP chunked_arraySEXP, SEXP offsetSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkArray__Slice2(chunked_array, offset, length));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__from_list
std::shared_ptr<arrow::ChunkedArray> ChunkedArray__from_list(List chunks);
RcppExport SEXP _arrow_ChunkedArray__from_list(SEXP chunksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chunks(chunksSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__from_list(chunks));
    return rcpp_result_gen;
END_RCPP
}
// Column__length
int Column__length(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__length(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__length(column));
    return rcpp_result_gen;
END_RCPP
}
// Column__null_count
int Column__null_count(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__null_count(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__null_count(column));
    return rcpp_result_gen;
END_RCPP
}
// Column__type
std::shared_ptr<arrow::DataType> Column__type(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__type(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__type(column));
    return rcpp_result_gen;
END_RCPP
}
// Column__data
std::shared_ptr<arrow::ChunkedArray> Column__data(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__data(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__data(column));
    return rcpp_result_gen;
END_RCPP
}
// util___Codec__Create
std::unique_ptr<arrow::util::Codec> util___Codec__Create(arrow::Compression::type codec);
RcppExport SEXP _arrow_util___Codec__Create(SEXP codecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::Compression::type >::type codec(codecSEXP);
    rcpp_result_gen = Rcpp::wrap(util___Codec__Create(codec));
    return rcpp_result_gen;
END_RCPP
}
// io___CompressedOutputStream__Make
std::shared_ptr<arrow::io::CompressedOutputStream> io___CompressedOutputStream__Make(const std::unique_ptr<arrow::util::Codec>& codec, const std::shared_ptr<arrow::io::OutputStream>& raw);
RcppExport SEXP _arrow_io___CompressedOutputStream__Make(SEXP codecSEXP, SEXP rawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::util::Codec>& >::type codec(codecSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::OutputStream>& >::type raw(rawSEXP);
    rcpp_result_gen = Rcpp::wrap(io___CompressedOutputStream__Make(codec, raw));
    return rcpp_result_gen;
END_RCPP
}
// io___CompressedInputStream__Make
std::shared_ptr<arrow::io::CompressedInputStream> io___CompressedInputStream__Make(const std::unique_ptr<arrow::util::Codec>& codec, const std::shared_ptr<arrow::io::InputStream>& raw);
RcppExport SEXP _arrow_io___CompressedInputStream__Make(SEXP codecSEXP, SEXP rawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::util::Codec>& >::type codec(codecSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type raw(rawSEXP);
    rcpp_result_gen = Rcpp::wrap(io___CompressedInputStream__Make(codec, raw));
    return rcpp_result_gen;
END_RCPP
}
// compute___CastOptions__initialize
std::shared_ptr<arrow::compute::CastOptions> compute___CastOptions__initialize(bool allow_int_overflow, bool allow_time_truncate, bool allow_float_truncate);
RcppExport SEXP _arrow_compute___CastOptions__initialize(SEXP allow_int_overflowSEXP, SEXP allow_time_truncateSEXP, SEXP allow_float_truncateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type allow_int_overflow(allow_int_overflowSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_time_truncate(allow_time_truncateSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_float_truncate(allow_float_truncateSEXP);
    rcpp_result_gen = Rcpp::wrap(compute___CastOptions__initialize(allow_int_overflow, allow_time_truncate, allow_float_truncate));
    return rcpp_result_gen;
END_RCPP
}
// Array__cast
std::shared_ptr<arrow::Array> Array__cast(const std::shared_ptr<arrow::Array>& array, const std::shared_ptr<arrow::DataType>& target_type, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_Array__cast(SEXP arraySEXP, SEXP target_typeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type target_type(target_typeSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__cast(array, target_type, options));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__cast
std::shared_ptr<arrow::ChunkedArray> ChunkedArray__cast(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, const std::shared_ptr<arrow::DataType>& target_type, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_ChunkedArray__cast(SEXP chunked_arraySEXP, SEXP target_typeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type target_type(target_typeSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__cast(chunked_array, target_type, options));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__cast
std::shared_ptr<arrow::RecordBatch> RecordBatch__cast(const std::shared_ptr<arrow::RecordBatch>& batch, const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_RecordBatch__cast(SEXP batchSEXP, SEXP schemaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__cast(batch, schema, options));
    return rcpp_result_gen;
END_RCPP
}
// Table__cast
std::shared_ptr<arrow::Table> Table__cast(const std::shared_ptr<arrow::Table>& table, const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_Table__cast(SEXP tableSEXP, SEXP schemaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__cast(table, schema, options));
    return rcpp_result_gen;
END_RCPP
}
// csv___ReadOptions__initialize
std::shared_ptr<arrow::csv::ReadOptions> csv___ReadOptions__initialize(List_ options);
RcppExport SEXP _arrow_csv___ReadOptions__initialize(SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List_ >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(csv___ReadOptions__initialize(options));
    return rcpp_result_gen;
END_RCPP
}
// csv___ParseOptions__initialize
std::shared_ptr<arrow::csv::ParseOptions> csv___ParseOptions__initialize(List_ options);
RcppExport SEXP _arrow_csv___ParseOptions__initialize(SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List_ >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(csv___ParseOptions__initialize(options));
    return rcpp_result_gen;
END_RCPP
}
// csv___ConvertOptions__initialize
std::shared_ptr<arrow::csv::ConvertOptions> csv___ConvertOptions__initialize(List_ options);
RcppExport SEXP _arrow_csv___ConvertOptions__initialize(SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List_ >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(csv___ConvertOptions__initialize(options));
    return rcpp_result_gen;
END_RCPP
}
// csv___TableReader__Make
std::shared_ptr<arrow::csv::TableReader> csv___TableReader__Make(const std::shared_ptr<arrow::io::InputStream>& input, const std::shared_ptr<arrow::csv::ReadOptions>& read_options, const std::shared_ptr<arrow::csv::ParseOptions>& parse_options, const std::shared_ptr<arrow::csv::ConvertOptions>& convert_options);
RcppExport SEXP _arrow_csv___TableReader__Make(SEXP inputSEXP, SEXP read_optionsSEXP, SEXP parse_optionsSEXP, SEXP convert_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::csv::ReadOptions>& >::type read_options(read_optionsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::csv::ParseOptions>& >::type parse_options(parse_optionsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::csv::ConvertOptions>& >::type convert_options(convert_optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(csv___TableReader__Make(input, read_options, parse_options, convert_options));
    return rcpp_result_gen;
END_RCPP
}
// csv___TableReader__Read
std::shared_ptr<arrow::Table> csv___TableReader__Read(const std::shared_ptr<arrow::csv::TableReader>& table_reader);
RcppExport SEXP _arrow_csv___TableReader__Read(SEXP table_readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::csv::TableReader>& >::type table_reader(table_readerSEXP);
    rcpp_result_gen = Rcpp::wrap(csv___TableReader__Read(table_reader));
    return rcpp_result_gen;
END_RCPP
}
// shared_ptr_is_null
bool shared_ptr_is_null(SEXP xp);
RcppExport SEXP _arrow_shared_ptr_is_null(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(shared_ptr_is_null(xp));
    return rcpp_result_gen;
END_RCPP
}
// unique_ptr_is_null
bool unique_ptr_is_null(SEXP xp);
RcppExport SEXP _arrow_unique_ptr_is_null(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_ptr_is_null(xp));
    return rcpp_result_gen;
END_RCPP
}
// Int8__initialize
std::shared_ptr<arrow::DataType> Int8__initialize();
RcppExport SEXP _arrow_Int8__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int8__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Int16__initialize
std::shared_ptr<arrow::DataType> Int16__initialize();
RcppExport SEXP _arrow_Int16__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int16__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Int32__initialize
std::shared_ptr<arrow::DataType> Int32__initialize();
RcppExport SEXP _arrow_Int32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Int64__initialize
std::shared_ptr<arrow::DataType> Int64__initialize();
RcppExport SEXP _arrow_Int64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt8__initialize
std::shared_ptr<arrow::DataType> UInt8__initialize();
RcppExport SEXP _arrow_UInt8__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt8__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt16__initialize
std::shared_ptr<arrow::DataType> UInt16__initialize();
RcppExport SEXP _arrow_UInt16__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt16__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt32__initialize
std::shared_ptr<arrow::DataType> UInt32__initialize();
RcppExport SEXP _arrow_UInt32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt64__initialize
std::shared_ptr<arrow::DataType> UInt64__initialize();
RcppExport SEXP _arrow_UInt64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Float16__initialize
std::shared_ptr<arrow::DataType> Float16__initialize();
RcppExport SEXP _arrow_Float16__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Float16__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Float32__initialize
std::shared_ptr<arrow::DataType> Float32__initialize();
RcppExport SEXP _arrow_Float32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Float32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Float64__initialize
std::shared_ptr<arrow::DataType> Float64__initialize();
RcppExport SEXP _arrow_Float64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Float64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Boolean__initialize
std::shared_ptr<arrow::DataType> Boolean__initialize();
RcppExport SEXP _arrow_Boolean__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Boolean__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Utf8__initialize
std::shared_ptr<arrow::DataType> Utf8__initialize();
RcppExport SEXP _arrow_Utf8__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Utf8__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Date32__initialize
std::shared_ptr<arrow::DataType> Date32__initialize();
RcppExport SEXP _arrow_Date32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Date32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Date64__initialize
std::shared_ptr<arrow::DataType> Date64__initialize();
RcppExport SEXP _arrow_Date64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Date64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Null__initialize
std::shared_ptr<arrow::DataType> Null__initialize();
RcppExport SEXP _arrow_Null__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Null__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Decimal128Type__initialize
std::shared_ptr<arrow::DataType> Decimal128Type__initialize(int32_t precision, int32_t scale);
RcppExport SEXP _arrow_Decimal128Type__initialize(SEXP precisionSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< int32_t >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(Decimal128Type__initialize(precision, scale));
    return rcpp_result_gen;
END_RCPP
}
// FixedSizeBinary__initialize
std::shared_ptr<arrow::DataType> FixedSizeBinary__initialize(int32_t byte_width);
RcppExport SEXP _arrow_FixedSizeBinary__initialize(SEXP byte_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type byte_width(byte_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(FixedSizeBinary__initialize(byte_width));
    return rcpp_result_gen;
END_RCPP
}
// Timestamp__initialize1
std::shared_ptr<arrow::DataType> Timestamp__initialize1(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Timestamp__initialize1(SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Timestamp__initialize1(unit));
    return rcpp_result_gen;
END_RCPP
}
// Timestamp__initialize2
std::shared_ptr<arrow::DataType> Timestamp__initialize2(arrow::TimeUnit::type unit, const std::string& timezone);
RcppExport SEXP _arrow_Timestamp__initialize2(SEXP unitSEXP, SEXP timezoneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type timezone(timezoneSEXP);
    rcpp_result_gen = Rcpp::wrap(Timestamp__initialize2(unit, timezone));
    return rcpp_result_gen;
END_RCPP
}
// Time32__initialize
std::shared_ptr<arrow::DataType> Time32__initialize(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Time32__initialize(SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Time32__initialize(unit));
    return rcpp_result_gen;
END_RCPP
}
// Time64__initialize
std::shared_ptr<arrow::DataType> Time64__initialize(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Time64__initialize(SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Time64__initialize(unit));
    return rcpp_result_gen;
END_RCPP
}
// list__
SEXP list__(SEXP x);
RcppExport SEXP _arrow_list__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list__(x));
    return rcpp_result_gen;
END_RCPP
}
// struct_
std::shared_ptr<arrow::DataType> struct_(List fields);
RcppExport SEXP _arrow_struct_(SEXP fieldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fields(fieldsSEXP);
    rcpp_result_gen = Rcpp::wrap(struct_(fields));
    return rcpp_result_gen;
END_RCPP
}
// DataType__ToString
std::string DataType__ToString(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__ToString(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__ToString(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__name
std::string DataType__name(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__name(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__name(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__Equals
bool DataType__Equals(const std::shared_ptr<arrow::DataType>& lhs, const std::shared_ptr<arrow::DataType>& rhs);
RcppExport SEXP _arrow_DataType__Equals(SEXP lhsSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__Equals(lhs, rhs));
    return rcpp_result_gen;
END_RCPP
}
// DataType__num_children
int DataType__num_children(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__num_children(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__num_children(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__children_pointer
List DataType__children_pointer(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__children_pointer(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__children_pointer(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__id
arrow::Type::type DataType__id(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__id(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__id(type));
    return rcpp_result_gen;
END_RCPP
}
// schema_
std::shared_ptr<arrow::Schema> schema_(List fields);
RcppExport SEXP _arrow_schema_(SEXP fieldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fields(fieldsSEXP);
    rcpp_result_gen = Rcpp::wrap(schema_(fields));
    return rcpp_result_gen;
END_RCPP
}
// Schema__ToString
std::string Schema__ToString(const std::shared_ptr<arrow::Schema>& s);
RcppExport SEXP _arrow_Schema__ToString(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(Schema__ToString(s));
    return rcpp_result_gen;
END_RCPP
}
// Schema__num_fields
int Schema__num_fields(const std::shared_ptr<arrow::Schema>& s);
RcppExport SEXP _arrow_Schema__num_fields(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(Schema__num_fields(s));
    return rcpp_result_gen;
END_RCPP
}
// Schema__field
std::shared_ptr<arrow::Field> Schema__field(const std::shared_ptr<arrow::Schema>& s, int i);
RcppExport SEXP _arrow_Schema__field(SEXP sSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Schema__field(s, i));
    return rcpp_result_gen;
END_RCPP
}
// Schema__names
CharacterVector Schema__names(const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_Schema__names(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(Schema__names(schema));
    return rcpp_result_gen;
END_RCPP
}
// ListType__ToString
std::string ListType__ToString(const std::shared_ptr<arrow::ListType>& type);
RcppExport SEXP _arrow_ListType__ToString(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ListType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(ListType__ToString(type));
    return rcpp_result_gen;
END_RCPP
}
// FixedWidthType__bit_width
int FixedWidthType__bit_width(const std::shared_ptr<arrow::FixedWidthType>& type);
RcppExport SEXP _arrow_FixedWidthType__bit_width(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::FixedWidthType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(FixedWidthType__bit_width(type));
    return rcpp_result_gen;
END_RCPP
}
// DateType__unit
arrow::DateUnit DateType__unit(const std::shared_ptr<arrow::DateType>& type);
RcppExport SEXP _arrow_DateType__unit(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DateType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DateType__unit(type));
    return rcpp_result_gen;
END_RCPP
}
// TimeType__unit
arrow::TimeUnit::type TimeType__unit(const std::shared_ptr<arrow::TimeType>& type);
RcppExport SEXP _arrow_TimeType__unit(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::TimeType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeType__unit(type));
    return rcpp_result_gen;
END_RCPP
}
// DecimalType__precision
int32_t DecimalType__precision(const std::shared_ptr<arrow::DecimalType>& type);
RcppExport SEXP _arrow_DecimalType__precision(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DecimalType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DecimalType__precision(type));
    return rcpp_result_gen;
END_RCPP
}
// DecimalType__scale
int32_t DecimalType__scale(const std::shared_ptr<arrow::DecimalType>& type);
RcppExport SEXP _arrow_DecimalType__scale(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DecimalType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DecimalType__scale(type));
    return rcpp_result_gen;
END_RCPP
}
// TimestampType__timezone
std::string TimestampType__timezone(const std::shared_ptr<arrow::TimestampType>& type);
RcppExport SEXP _arrow_TimestampType__timezone(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::TimestampType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimestampType__timezone(type));
    return rcpp_result_gen;
END_RCPP
}
// TimestampType__unit
arrow::TimeUnit::type TimestampType__unit(const std::shared_ptr<arrow::TimestampType>& type);
RcppExport SEXP _arrow_TimestampType__unit(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::TimestampType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimestampType__unit(type));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryType__initialize
std::shared_ptr<arrow::DataType> DictionaryType__initialize(const std::shared_ptr<arrow::DataType>& type, const std::shared_ptr<arrow::Array>& array, bool ordered);
RcppExport SEXP _arrow_DictionaryType__initialize(SEXP typeSEXP, SEXP arraySEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryType__initialize(type, array, ordered));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryType__index_type
std::shared_ptr<arrow::DataType> DictionaryType__index_type(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__index_type(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DictionaryType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryType__index_type(type));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryType__name
std::string DictionaryType__name(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__name(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DictionaryType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryType__name(type));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryType__dictionary
std::shared_ptr<arrow::Array> DictionaryType__dictionary(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__dictionary(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DictionaryType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryType__dictionary(type));
    return rcpp_result_gen;
END_RCPP
}
// DictionaryType__ordered
bool DictionaryType__ordered(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__ordered(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DictionaryType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DictionaryType__ordered(type));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableWriter__SetDescription
void ipc___feather___TableWriter__SetDescription(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, const std::string& description);
RcppExport SEXP _arrow_ipc___feather___TableWriter__SetDescription(SEXP writerSEXP, SEXP descriptionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableWriter>& >::type writer(writerSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type description(descriptionSEXP);
    ipc___feather___TableWriter__SetDescription(writer, description);
    return R_NilValue;
END_RCPP
}
// ipc___feather___TableWriter__SetNumRows
void ipc___feather___TableWriter__SetNumRows(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, int64_t num_rows);
RcppExport SEXP _arrow_ipc___feather___TableWriter__SetNumRows(SEXP writerSEXP, SEXP num_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableWriter>& >::type writer(writerSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_rows(num_rowsSEXP);
    ipc___feather___TableWriter__SetNumRows(writer, num_rows);
    return R_NilValue;
END_RCPP
}
// ipc___feather___TableWriter__Append
void ipc___feather___TableWriter__Append(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, const std::string& name, const std::shared_ptr<arrow::Array>& values);
RcppExport SEXP _arrow_ipc___feather___TableWriter__Append(SEXP writerSEXP, SEXP nameSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableWriter>& >::type writer(writerSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type values(valuesSEXP);
    ipc___feather___TableWriter__Append(writer, name, values);
    return R_NilValue;
END_RCPP
}
// ipc___feather___TableWriter__Finalize
void ipc___feather___TableWriter__Finalize(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer);
RcppExport SEXP _arrow_ipc___feather___TableWriter__Finalize(SEXP writerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableWriter>& >::type writer(writerSEXP);
    ipc___feather___TableWriter__Finalize(writer);
    return R_NilValue;
END_RCPP
}
// ipc___feather___TableWriter__Open
std::unique_ptr<arrow::ipc::feather::TableWriter> ipc___feather___TableWriter__Open(const std::shared_ptr<arrow::io::OutputStream>& stream);
RcppExport SEXP _arrow_ipc___feather___TableWriter__Open(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::OutputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableWriter__Open(stream));
    return rcpp_result_gen;
END_RCPP
}
// ipc___TableWriter__RecordBatch__WriteFeather
void ipc___TableWriter__RecordBatch__WriteFeather(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_ipc___TableWriter__RecordBatch__WriteFeather(SEXP writerSEXP, SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableWriter>& >::type writer(writerSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    ipc___TableWriter__RecordBatch__WriteFeather(writer, batch);
    return R_NilValue;
END_RCPP
}
// ipc___feather___TableReader__GetDescription
std::string ipc___feather___TableReader__GetDescription(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__GetDescription(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__GetDescription(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__HasDescription
bool ipc___feather___TableReader__HasDescription(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__HasDescription(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__HasDescription(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__version
int ipc___feather___TableReader__version(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__version(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__version(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__num_rows
int64_t ipc___feather___TableReader__num_rows(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__num_rows(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__num_rows(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__num_columns
int64_t ipc___feather___TableReader__num_columns(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__num_columns(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__num_columns(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__GetColumnName
std::string ipc___feather___TableReader__GetColumnName(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader, int i);
RcppExport SEXP _arrow_ipc___feather___TableReader__GetColumnName(SEXP readerSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__GetColumnName(reader, i));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__GetColumn
std::shared_ptr<arrow::Column> ipc___feather___TableReader__GetColumn(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader, int i);
RcppExport SEXP _arrow_ipc___feather___TableReader__GetColumn(SEXP readerSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__GetColumn(reader, i));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__Read
std::shared_ptr<arrow::Table> ipc___feather___TableReader__Read(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader, SEXP columns);
RcppExport SEXP _arrow_ipc___feather___TableReader__Read(SEXP readerSEXP, SEXP columnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::feather::TableReader>& >::type reader(readerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type columns(columnsSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__Read(reader, columns));
    return rcpp_result_gen;
END_RCPP
}
// ipc___feather___TableReader__Open
std::unique_ptr<arrow::ipc::feather::TableReader> ipc___feather___TableReader__Open(const std::shared_ptr<arrow::io::RandomAccessFile>& stream);
RcppExport SEXP _arrow_ipc___feather___TableReader__Open(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::RandomAccessFile>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___feather___TableReader__Open(stream));
    return rcpp_result_gen;
END_RCPP
}
// Field__initialize
std::shared_ptr<arrow::Field> Field__initialize(const std::string& name, const std::shared_ptr<arrow::DataType>& field, bool nullable);
RcppExport SEXP _arrow_Field__initialize(SEXP nameSEXP, SEXP fieldSEXP, SEXP nullableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__initialize(name, field, nullable));
    return rcpp_result_gen;
END_RCPP
}
// Field__ToString
std::string Field__ToString(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__ToString(SEXP fieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type field(fieldSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__ToString(field));
    return rcpp_result_gen;
END_RCPP
}
// Field__name
std::string Field__name(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__name(SEXP fieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type field(fieldSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__name(field));
    return rcpp_result_gen;
END_RCPP
}
// Field__Equals
bool Field__Equals(const std::shared_ptr<arrow::Field>& field, const std::shared_ptr<arrow::Field>& other);
RcppExport SEXP _arrow_Field__Equals(SEXP fieldSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__Equals(field, other));
    return rcpp_result_gen;
END_RCPP
}
// Field__nullable
bool Field__nullable(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__nullable(SEXP fieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type field(fieldSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__nullable(field));
    return rcpp_result_gen;
END_RCPP
}
// Field__type
std::shared_ptr<arrow::DataType> Field__type(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__type(SEXP fieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type field(fieldSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__type(field));
    return rcpp_result_gen;
END_RCPP
}
// io___Readable__Read
std::shared_ptr<arrow::Buffer> io___Readable__Read(const std::shared_ptr<arrow::io::Readable>& x, int64_t nbytes);
RcppExport SEXP _arrow_io___Readable__Read(SEXP xSEXP, SEXP nbytesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::Readable>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type nbytes(nbytesSEXP);
    rcpp_result_gen = Rcpp::wrap(io___Readable__Read(x, nbytes));
    return rcpp_result_gen;
END_RCPP
}
// io___InputStream__Close
void io___InputStream__Close(const std::shared_ptr<arrow::io::InputStream>& x);
RcppExport SEXP _arrow_io___InputStream__Close(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type x(xSEXP);
    io___InputStream__Close(x);
    return R_NilValue;
END_RCPP
}
// io___OutputStream__Close
void io___OutputStream__Close(const std::shared_ptr<arrow::io::OutputStream>& x);
RcppExport SEXP _arrow_io___OutputStream__Close(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::OutputStream>& >::type x(xSEXP);
    io___OutputStream__Close(x);
    return R_NilValue;
END_RCPP
}
// io___RandomAccessFile__GetSize
int64_t io___RandomAccessFile__GetSize(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__GetSize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::RandomAccessFile>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(io___RandomAccessFile__GetSize(x));
    return rcpp_result_gen;
END_RCPP
}
// io___RandomAccessFile__supports_zero_copy
bool io___RandomAccessFile__supports_zero_copy(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__supports_zero_copy(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::RandomAccessFile>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(io___RandomAccessFile__supports_zero_copy(x));
    return rcpp_result_gen;
END_RCPP
}
// io___RandomAccessFile__Seek
void io___RandomAccessFile__Seek(const std::shared_ptr<arrow::io::RandomAccessFile>& x, int64_t position);
RcppExport SEXP _arrow_io___RandomAccessFile__Seek(SEXP xSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::RandomAccessFile>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type position(positionSEXP);
    io___RandomAccessFile__Seek(x, position);
    return R_NilValue;
END_RCPP
}
// io___RandomAccessFile__Tell
int64_t io___RandomAccessFile__Tell(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__Tell(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::RandomAccessFile>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(io___RandomAccessFile__Tell(x));
    return rcpp_result_gen;
END_RCPP
}
// io___MemoryMappedFile__Create
std::shared_ptr<arrow::io::MemoryMappedFile> io___MemoryMappedFile__Create(const std::string& path, int64_t size);
RcppExport SEXP _arrow_io___MemoryMappedFile__Create(SEXP pathSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int64_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(io___MemoryMappedFile__Create(path, size));
    return rcpp_result_gen;
END_RCPP
}
// io___MemoryMappedFile__Open
std::shared_ptr<arrow::io::MemoryMappedFile> io___MemoryMappedFile__Open(const std::string& path, arrow::io::FileMode::type mode);
RcppExport SEXP _arrow_io___MemoryMappedFile__Open(SEXP pathSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< arrow::io::FileMode::type >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(io___MemoryMappedFile__Open(path, mode));
    return rcpp_result_gen;
END_RCPP
}
// io___MemoryMappedFile__Resize
void io___MemoryMappedFile__Resize(const std::shared_ptr<arrow::io::MemoryMappedFile>& x, int64_t size);
RcppExport SEXP _arrow_io___MemoryMappedFile__Resize(SEXP xSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::MemoryMappedFile>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type size(sizeSEXP);
    io___MemoryMappedFile__Resize(x, size);
    return R_NilValue;
END_RCPP
}
// io___ReadableFile__Open
std::shared_ptr<arrow::io::ReadableFile> io___ReadableFile__Open(const std::string& path);
RcppExport SEXP _arrow_io___ReadableFile__Open(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(io___ReadableFile__Open(path));
    return rcpp_result_gen;
END_RCPP
}
// io___BufferReader__initialize
std::shared_ptr<arrow::io::BufferReader> io___BufferReader__initialize(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_io___BufferReader__initialize(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(io___BufferReader__initialize(buffer));
    return rcpp_result_gen;
END_RCPP
}
// io___Writable__write
void io___Writable__write(const std::shared_ptr<arrow::io::Writable>& stream, const std::shared_ptr<arrow::Buffer>& buf);
RcppExport SEXP _arrow_io___Writable__write(SEXP streamSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::Writable>& >::type stream(streamSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buf(bufSEXP);
    io___Writable__write(stream, buf);
    return R_NilValue;
END_RCPP
}
// io___OutputStream__Tell
int64_t io___OutputStream__Tell(const std::shared_ptr<arrow::io::OutputStream>& stream);
RcppExport SEXP _arrow_io___OutputStream__Tell(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::OutputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(io___OutputStream__Tell(stream));
    return rcpp_result_gen;
END_RCPP
}
// io___FileOutputStream__Open
std::shared_ptr<arrow::io::FileOutputStream> io___FileOutputStream__Open(const std::string& path);
RcppExport SEXP _arrow_io___FileOutputStream__Open(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(io___FileOutputStream__Open(path));
    return rcpp_result_gen;
END_RCPP
}
// io___BufferOutputStream__Create
std::shared_ptr<arrow::io::BufferOutputStream> io___BufferOutputStream__Create(int64_t initial_capacity);
RcppExport SEXP _arrow_io___BufferOutputStream__Create(SEXP initial_capacitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type initial_capacity(initial_capacitySEXP);
    rcpp_result_gen = Rcpp::wrap(io___BufferOutputStream__Create(initial_capacity));
    return rcpp_result_gen;
END_RCPP
}
// io___BufferOutputStream__capacity
int64_t io___BufferOutputStream__capacity(const std::shared_ptr<arrow::io::BufferOutputStream>& stream);
RcppExport SEXP _arrow_io___BufferOutputStream__capacity(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::BufferOutputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(io___BufferOutputStream__capacity(stream));
    return rcpp_result_gen;
END_RCPP
}
// io___BufferOutputStream__Finish
std::shared_ptr<arrow::Buffer> io___BufferOutputStream__Finish(const std::shared_ptr<arrow::io::BufferOutputStream>& stream);
RcppExport SEXP _arrow_io___BufferOutputStream__Finish(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::BufferOutputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(io___BufferOutputStream__Finish(stream));
    return rcpp_result_gen;
END_RCPP
}
// io___BufferOutputStream__Tell
int64_t io___BufferOutputStream__Tell(const std::shared_ptr<arrow::io::BufferOutputStream>& stream);
RcppExport SEXP _arrow_io___BufferOutputStream__Tell(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::BufferOutputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(io___BufferOutputStream__Tell(stream));
    return rcpp_result_gen;
END_RCPP
}
// io___BufferOutputStream__Write
void io___BufferOutputStream__Write(const std::shared_ptr<arrow::io::BufferOutputStream>& stream, RawVector_ bytes);
RcppExport SEXP _arrow_io___BufferOutputStream__Write(SEXP streamSEXP, SEXP bytesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::BufferOutputStream>& >::type stream(streamSEXP);
    Rcpp::traits::input_parameter< RawVector_ >::type bytes(bytesSEXP);
    io___BufferOutputStream__Write(stream, bytes);
    return R_NilValue;
END_RCPP
}
// io___MockOutputStream__initialize
std::shared_ptr<arrow::io::MockOutputStream> io___MockOutputStream__initialize();
RcppExport SEXP _arrow_io___MockOutputStream__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(io___MockOutputStream__initialize());
    return rcpp_result_gen;
END_RCPP
}
// io___MockOutputStream__GetExtentBytesWritten
int64_t io___MockOutputStream__GetExtentBytesWritten(const std::shared_ptr<arrow::io::MockOutputStream>& stream);
RcppExport SEXP _arrow_io___MockOutputStream__GetExtentBytesWritten(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::MockOutputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(io___MockOutputStream__GetExtentBytesWritten(stream));
    return rcpp_result_gen;
END_RCPP
}
// io___FixedSizeBufferWriter__initialize
std::shared_ptr<arrow::io::FixedSizeBufferWriter> io___FixedSizeBufferWriter__initialize(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_io___FixedSizeBufferWriter__initialize(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Buffer>& >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(io___FixedSizeBufferWriter__initialize(buffer));
    return rcpp_result_gen;
END_RCPP
}
// MemoryPool__default
std::shared_ptr<arrow::MemoryPool> MemoryPool__default();
RcppExport SEXP _arrow_MemoryPool__default() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(MemoryPool__default());
    return rcpp_result_gen;
END_RCPP
}
// MemoryPool__bytes_allocated
int MemoryPool__bytes_allocated(const std::shared_ptr<arrow::MemoryPool>& pool);
RcppExport SEXP _arrow_MemoryPool__bytes_allocated(SEXP poolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::MemoryPool>& >::type pool(poolSEXP);
    rcpp_result_gen = Rcpp::wrap(MemoryPool__bytes_allocated(pool));
    return rcpp_result_gen;
END_RCPP
}
// MemoryPool__max_memory
int MemoryPool__max_memory(const std::shared_ptr<arrow::MemoryPool>& pool);
RcppExport SEXP _arrow_MemoryPool__max_memory(SEXP poolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::MemoryPool>& >::type pool(poolSEXP);
    rcpp_result_gen = Rcpp::wrap(MemoryPool__max_memory(pool));
    return rcpp_result_gen;
END_RCPP
}
// ipc___Message__body_length
int64_t ipc___Message__body_length(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__body_length(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___Message__body_length(message));
    return rcpp_result_gen;
END_RCPP
}
// ipc___Message__metadata
std::shared_ptr<arrow::Buffer> ipc___Message__metadata(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__metadata(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___Message__metadata(message));
    return rcpp_result_gen;
END_RCPP
}
// ipc___Message__body
std::shared_ptr<arrow::Buffer> ipc___Message__body(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__body(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___Message__body(message));
    return rcpp_result_gen;
END_RCPP
}
// ipc___Message__Verify
int64_t ipc___Message__Verify(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__Verify(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___Message__Verify(message));
    return rcpp_result_gen;
END_RCPP
}
// ipc___Message__type
arrow::ipc::Message::Type ipc___Message__type(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__type(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___Message__type(message));
    return rcpp_result_gen;
END_RCPP
}
// ipc___Message__Equals
bool ipc___Message__Equals(const std::unique_ptr<arrow::ipc::Message>& x, const std::unique_ptr<arrow::ipc::Message>& y);
RcppExport SEXP _arrow_ipc___Message__Equals(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___Message__Equals(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ipc___ReadRecordBatch__Message__Schema
std::shared_ptr<arrow::RecordBatch> ipc___ReadRecordBatch__Message__Schema(const std::unique_ptr<arrow::ipc::Message>& message, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___ReadRecordBatch__Message__Schema(SEXP messageSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___ReadRecordBatch__Message__Schema(message, schema));
    return rcpp_result_gen;
END_RCPP
}
// ipc___ReadSchema_InputStream
std::shared_ptr<arrow::Schema> ipc___ReadSchema_InputStream(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___ReadSchema_InputStream(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___ReadSchema_InputStream(stream));
    return rcpp_result_gen;
END_RCPP
}
// ipc___MessageReader__Open
std::unique_ptr<arrow::ipc::MessageReader> ipc___MessageReader__Open(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___MessageReader__Open(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___MessageReader__Open(stream));
    return rcpp_result_gen;
END_RCPP
}
// ipc___MessageReader__ReadNextMessage
std::unique_ptr<arrow::ipc::Message> ipc___MessageReader__ReadNextMessage(const std::unique_ptr<arrow::ipc::MessageReader>& reader);
RcppExport SEXP _arrow_ipc___MessageReader__ReadNextMessage(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::MessageReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___MessageReader__ReadNextMessage(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___ReadMessage
std::unique_ptr<arrow::ipc::Message> ipc___ReadMessage(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___ReadMessage(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___ReadMessage(stream));
    return rcpp_result_gen;
END_RCPP
}
// read_parquet_file
std::shared_ptr<arrow::Table> read_parquet_file(std::string filename);
RcppExport SEXP _arrow_read_parquet_file(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(read_parquet_file(filename));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__num_columns
int RecordBatch__num_columns(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__num_columns(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__num_columns(x));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__num_rows
int RecordBatch__num_rows(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__num_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__num_rows(x));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__schema
std::shared_ptr<arrow::Schema> RecordBatch__schema(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__schema(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__schema(x));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__columns
arrow::ArrayVector RecordBatch__columns(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_RecordBatch__columns(SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__columns(batch));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__column
std::shared_ptr<arrow::Array> RecordBatch__column(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__column(SEXP batchSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__column(batch, i));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__from_dataframe
std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(DataFrame tbl);
RcppExport SEXP _arrow_RecordBatch__from_dataframe(SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tbl(tblSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__from_dataframe(tbl));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__Equals
bool RecordBatch__Equals(const std::shared_ptr<arrow::RecordBatch>& self, const std::shared_ptr<arrow::RecordBatch>& other);
RcppExport SEXP _arrow_RecordBatch__Equals(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__Equals(self, other));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__RemoveColumn
std::shared_ptr<arrow::RecordBatch> RecordBatch__RemoveColumn(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__RemoveColumn(SEXP batchSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__RemoveColumn(batch, i));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__column_name
std::string RecordBatch__column_name(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__column_name(SEXP batchSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__column_name(batch, i));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__names
CharacterVector RecordBatch__names(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_RecordBatch__names(SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__names(batch));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__Slice1
std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(const std::shared_ptr<arrow::RecordBatch>& self, int offset);
RcppExport SEXP _arrow_RecordBatch__Slice1(SEXP selfSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__Slice1(self, offset));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__Slice2
std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(const std::shared_ptr<arrow::RecordBatch>& self, int offset, int length);
RcppExport SEXP _arrow_RecordBatch__Slice2(SEXP selfSEXP, SEXP offsetSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__Slice2(self, offset, length));
    return rcpp_result_gen;
END_RCPP
}
// ipc___SerializeRecordBatch__Raw
RawVector ipc___SerializeRecordBatch__Raw(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_ipc___SerializeRecordBatch__Raw(SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___SerializeRecordBatch__Raw(batch));
    return rcpp_result_gen;
END_RCPP
}
// ipc___ReadRecordBatch__InputStream__Schema
std::shared_ptr<arrow::RecordBatch> ipc___ReadRecordBatch__InputStream__Schema(const std::shared_ptr<arrow::io::InputStream>& stream, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___ReadRecordBatch__InputStream__Schema(SEXP streamSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___ReadRecordBatch__InputStream__Schema(stream, schema));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatchReader__schema
std::shared_ptr<arrow::Schema> RecordBatchReader__schema(const std::shared_ptr<arrow::RecordBatchReader>& reader);
RcppExport SEXP _arrow_RecordBatchReader__schema(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatchReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatchReader__schema(reader));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatchReader__ReadNext
std::shared_ptr<arrow::RecordBatch> RecordBatchReader__ReadNext(const std::shared_ptr<arrow::RecordBatchReader>& reader);
RcppExport SEXP _arrow_RecordBatchReader__ReadNext(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatchReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatchReader__ReadNext(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchStreamReader__Open
std::shared_ptr<arrow::RecordBatchReader> ipc___RecordBatchStreamReader__Open(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___RecordBatchStreamReader__Open(SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchStreamReader__Open(stream));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchStreamReader__batches
std::vector<std::shared_ptr<arrow::RecordBatch>> ipc___RecordBatchStreamReader__batches(const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchStreamReader__batches(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchStreamReader__batches(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchFileReader__schema
std::shared_ptr<arrow::Schema> ipc___RecordBatchFileReader__schema(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__schema(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchFileReader__schema(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchFileReader__num_record_batches
int ipc___RecordBatchFileReader__num_record_batches(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__num_record_batches(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchFileReader__num_record_batches(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchFileReader__ReadRecordBatch
std::shared_ptr<arrow::RecordBatch> ipc___RecordBatchFileReader__ReadRecordBatch(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader, int i);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__ReadRecordBatch(SEXP readerSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& >::type reader(readerSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchFileReader__ReadRecordBatch(reader, i));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchFileReader__Open
std::shared_ptr<arrow::ipc::RecordBatchFileReader> ipc___RecordBatchFileReader__Open(const std::shared_ptr<arrow::io::RandomAccessFile>& file);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__Open(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::RandomAccessFile>& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchFileReader__Open(file));
    return rcpp_result_gen;
END_RCPP
}
// Table__from_RecordBatchFileReader
std::shared_ptr<arrow::Table> Table__from_RecordBatchFileReader(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_Table__from_RecordBatchFileReader(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__from_RecordBatchFileReader(reader));
    return rcpp_result_gen;
END_RCPP
}
// Table__from_RecordBatchStreamReader
std::shared_ptr<arrow::Table> Table__from_RecordBatchStreamReader(const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>& reader);
RcppExport SEXP _arrow_Table__from_RecordBatchStreamReader(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__from_RecordBatchStreamReader(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchFileReader__batches
std::vector<std::shared_ptr<arrow::RecordBatch>> ipc___RecordBatchFileReader__batches(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__batches(SEXP readerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& >::type reader(readerSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchFileReader__batches(reader));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchWriter__WriteRecordBatch
void ipc___RecordBatchWriter__WriteRecordBatch(const std::shared_ptr<arrow::ipc::RecordBatchWriter>& batch_writer, const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_ipc___RecordBatchWriter__WriteRecordBatch(SEXP batch_writerSEXP, SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchWriter>& >::type batch_writer(batch_writerSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    ipc___RecordBatchWriter__WriteRecordBatch(batch_writer, batch);
    return R_NilValue;
END_RCPP
}
// ipc___RecordBatchWriter__WriteTable
void ipc___RecordBatchWriter__WriteTable(const std::shared_ptr<arrow::ipc::RecordBatchWriter>& batch_writer, const std::shared_ptr<arrow::Table>& table);
RcppExport SEXP _arrow_ipc___RecordBatchWriter__WriteTable(SEXP batch_writerSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchWriter>& >::type batch_writer(batch_writerSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    ipc___RecordBatchWriter__WriteTable(batch_writer, table);
    return R_NilValue;
END_RCPP
}
// ipc___RecordBatchWriter__Close
void ipc___RecordBatchWriter__Close(const std::shared_ptr<arrow::ipc::RecordBatchWriter>& batch_writer);
RcppExport SEXP _arrow_ipc___RecordBatchWriter__Close(SEXP batch_writerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ipc::RecordBatchWriter>& >::type batch_writer(batch_writerSEXP);
    ipc___RecordBatchWriter__Close(batch_writer);
    return R_NilValue;
END_RCPP
}
// ipc___RecordBatchFileWriter__Open
std::shared_ptr<arrow::ipc::RecordBatchWriter> ipc___RecordBatchFileWriter__Open(const std::shared_ptr<arrow::io::OutputStream>& stream, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___RecordBatchFileWriter__Open(SEXP streamSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::OutputStream>& >::type stream(streamSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchFileWriter__Open(stream, schema));
    return rcpp_result_gen;
END_RCPP
}
// ipc___RecordBatchStreamWriter__Open
std::shared_ptr<arrow::ipc::RecordBatchWriter> ipc___RecordBatchStreamWriter__Open(const std::shared_ptr<arrow::io::OutputStream>& stream, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___RecordBatchStreamWriter__Open(SEXP streamSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::OutputStream>& >::type stream(streamSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(ipc___RecordBatchStreamWriter__Open(stream, schema));
    return rcpp_result_gen;
END_RCPP
}
// Table__from_dataframe
std::shared_ptr<arrow::Table> Table__from_dataframe(DataFrame tbl);
RcppExport SEXP _arrow_Table__from_dataframe(SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tbl(tblSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__from_dataframe(tbl));
    return rcpp_result_gen;
END_RCPP
}
// Table__num_columns
int Table__num_columns(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__num_columns(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__num_columns(x));
    return rcpp_result_gen;
END_RCPP
}
// Table__num_rows
int Table__num_rows(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__num_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__num_rows(x));
    return rcpp_result_gen;
END_RCPP
}
// Table__schema
std::shared_ptr<arrow::Schema> Table__schema(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__schema(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__schema(x));
    return rcpp_result_gen;
END_RCPP
}
// Table__column
std::shared_ptr<arrow::Column> Table__column(const std::shared_ptr<arrow::Table>& table, int i);
RcppExport SEXP _arrow_Table__column(SEXP tableSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__column(table, i));
    return rcpp_result_gen;
END_RCPP
}
// Table__columns
std::vector<std::shared_ptr<arrow::Column>> Table__columns(const std::shared_ptr<arrow::Table>& table);
RcppExport SEXP _arrow_Table__columns(SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__columns(table));
    return rcpp_result_gen;
END_RCPP
}
// GetCpuThreadPoolCapacity
int GetCpuThreadPoolCapacity();
RcppExport SEXP _arrow_GetCpuThreadPoolCapacity() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetCpuThreadPoolCapacity());
    return rcpp_result_gen;
END_RCPP
}
// SetCpuThreadPoolCapacity
void SetCpuThreadPoolCapacity(int threads);
RcppExport SEXP _arrow_SetCpuThreadPoolCapacity(SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    SetCpuThreadPoolCapacity(threads);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_arrow_Array__from_vector", (DL_FUNC) &_arrow_Array__from_vector, 1},
    {"_arrow_Array__Slice1", (DL_FUNC) &_arrow_Array__Slice1, 2},
    {"_arrow_Array__Slice2", (DL_FUNC) &_arrow_Array__Slice2, 3},
    {"_arrow_Array__IsNull", (DL_FUNC) &_arrow_Array__IsNull, 2},
    {"_arrow_Array__IsValid", (DL_FUNC) &_arrow_Array__IsValid, 2},
    {"_arrow_Array__length", (DL_FUNC) &_arrow_Array__length, 1},
    {"_arrow_Array__offset", (DL_FUNC) &_arrow_Array__offset, 1},
    {"_arrow_Array__null_count", (DL_FUNC) &_arrow_Array__null_count, 1},
    {"_arrow_Array__type", (DL_FUNC) &_arrow_Array__type, 1},
    {"_arrow_Array__ToString", (DL_FUNC) &_arrow_Array__ToString, 1},
    {"_arrow_Array__type_id", (DL_FUNC) &_arrow_Array__type_id, 1},
    {"_arrow_Array__Equals", (DL_FUNC) &_arrow_Array__Equals, 2},
    {"_arrow_Array__ApproxEquals", (DL_FUNC) &_arrow_Array__ApproxEquals, 2},
    {"_arrow_Array__data", (DL_FUNC) &_arrow_Array__data, 1},
    {"_arrow_Array__RangeEquals", (DL_FUNC) &_arrow_Array__RangeEquals, 5},
    {"_arrow_Array__Mask", (DL_FUNC) &_arrow_Array__Mask, 1},
    {"_arrow_DictionaryArray__indices", (DL_FUNC) &_arrow_DictionaryArray__indices, 1},
    {"_arrow_DictionaryArray__dictionary", (DL_FUNC) &_arrow_DictionaryArray__dictionary, 1},
    {"_arrow_Array__as_vector", (DL_FUNC) &_arrow_Array__as_vector, 1},
    {"_arrow_ChunkedArray__as_vector", (DL_FUNC) &_arrow_ChunkedArray__as_vector, 1},
    {"_arrow_RecordBatch__to_dataframe", (DL_FUNC) &_arrow_RecordBatch__to_dataframe, 2},
    {"_arrow_Table__to_dataframe", (DL_FUNC) &_arrow_Table__to_dataframe, 2},
    {"_arrow_ArrayData__get_type", (DL_FUNC) &_arrow_ArrayData__get_type, 1},
    {"_arrow_ArrayData__get_length", (DL_FUNC) &_arrow_ArrayData__get_length, 1},
    {"_arrow_ArrayData__get_null_count", (DL_FUNC) &_arrow_ArrayData__get_null_count, 1},
    {"_arrow_ArrayData__get_offset", (DL_FUNC) &_arrow_ArrayData__get_offset, 1},
    {"_arrow_ArrayData__buffers", (DL_FUNC) &_arrow_ArrayData__buffers, 1},
    {"_arrow_Buffer__is_mutable", (DL_FUNC) &_arrow_Buffer__is_mutable, 1},
    {"_arrow_Buffer__ZeroPadding", (DL_FUNC) &_arrow_Buffer__ZeroPadding, 1},
    {"_arrow_Buffer__capacity", (DL_FUNC) &_arrow_Buffer__capacity, 1},
    {"_arrow_Buffer__size", (DL_FUNC) &_arrow_Buffer__size, 1},
    {"_arrow_r___RBuffer__initialize", (DL_FUNC) &_arrow_r___RBuffer__initialize, 1},
    {"_arrow_ChunkedArray__length", (DL_FUNC) &_arrow_ChunkedArray__length, 1},
    {"_arrow_ChunkedArray__null_count", (DL_FUNC) &_arrow_ChunkedArray__null_count, 1},
    {"_arrow_ChunkedArray__num_chunks", (DL_FUNC) &_arrow_ChunkedArray__num_chunks, 1},
    {"_arrow_ChunkedArray__chunk", (DL_FUNC) &_arrow_ChunkedArray__chunk, 2},
    {"_arrow_ChunkedArray__chunks", (DL_FUNC) &_arrow_ChunkedArray__chunks, 1},
    {"_arrow_ChunkedArray__type", (DL_FUNC) &_arrow_ChunkedArray__type, 1},
    {"_arrow_ChunkArray__Slice1", (DL_FUNC) &_arrow_ChunkArray__Slice1, 2},
    {"_arrow_ChunkArray__Slice2", (DL_FUNC) &_arrow_ChunkArray__Slice2, 3},
    {"_arrow_ChunkedArray__from_list", (DL_FUNC) &_arrow_ChunkedArray__from_list, 1},
    {"_arrow_Column__length", (DL_FUNC) &_arrow_Column__length, 1},
    {"_arrow_Column__null_count", (DL_FUNC) &_arrow_Column__null_count, 1},
    {"_arrow_Column__type", (DL_FUNC) &_arrow_Column__type, 1},
    {"_arrow_Column__data", (DL_FUNC) &_arrow_Column__data, 1},
    {"_arrow_util___Codec__Create", (DL_FUNC) &_arrow_util___Codec__Create, 1},
    {"_arrow_io___CompressedOutputStream__Make", (DL_FUNC) &_arrow_io___CompressedOutputStream__Make, 2},
    {"_arrow_io___CompressedInputStream__Make", (DL_FUNC) &_arrow_io___CompressedInputStream__Make, 2},
    {"_arrow_compute___CastOptions__initialize", (DL_FUNC) &_arrow_compute___CastOptions__initialize, 3},
    {"_arrow_Array__cast", (DL_FUNC) &_arrow_Array__cast, 3},
    {"_arrow_ChunkedArray__cast", (DL_FUNC) &_arrow_ChunkedArray__cast, 3},
    {"_arrow_RecordBatch__cast", (DL_FUNC) &_arrow_RecordBatch__cast, 3},
    {"_arrow_Table__cast", (DL_FUNC) &_arrow_Table__cast, 3},
    {"_arrow_csv___ReadOptions__initialize", (DL_FUNC) &_arrow_csv___ReadOptions__initialize, 1},
    {"_arrow_csv___ParseOptions__initialize", (DL_FUNC) &_arrow_csv___ParseOptions__initialize, 1},
    {"_arrow_csv___ConvertOptions__initialize", (DL_FUNC) &_arrow_csv___ConvertOptions__initialize, 1},
    {"_arrow_csv___TableReader__Make", (DL_FUNC) &_arrow_csv___TableReader__Make, 4},
    {"_arrow_csv___TableReader__Read", (DL_FUNC) &_arrow_csv___TableReader__Read, 1},
    {"_arrow_shared_ptr_is_null", (DL_FUNC) &_arrow_shared_ptr_is_null, 1},
    {"_arrow_unique_ptr_is_null", (DL_FUNC) &_arrow_unique_ptr_is_null, 1},
    {"_arrow_Int8__initialize", (DL_FUNC) &_arrow_Int8__initialize, 0},
    {"_arrow_Int16__initialize", (DL_FUNC) &_arrow_Int16__initialize, 0},
    {"_arrow_Int32__initialize", (DL_FUNC) &_arrow_Int32__initialize, 0},
    {"_arrow_Int64__initialize", (DL_FUNC) &_arrow_Int64__initialize, 0},
    {"_arrow_UInt8__initialize", (DL_FUNC) &_arrow_UInt8__initialize, 0},
    {"_arrow_UInt16__initialize", (DL_FUNC) &_arrow_UInt16__initialize, 0},
    {"_arrow_UInt32__initialize", (DL_FUNC) &_arrow_UInt32__initialize, 0},
    {"_arrow_UInt64__initialize", (DL_FUNC) &_arrow_UInt64__initialize, 0},
    {"_arrow_Float16__initialize", (DL_FUNC) &_arrow_Float16__initialize, 0},
    {"_arrow_Float32__initialize", (DL_FUNC) &_arrow_Float32__initialize, 0},
    {"_arrow_Float64__initialize", (DL_FUNC) &_arrow_Float64__initialize, 0},
    {"_arrow_Boolean__initialize", (DL_FUNC) &_arrow_Boolean__initialize, 0},
    {"_arrow_Utf8__initialize", (DL_FUNC) &_arrow_Utf8__initialize, 0},
    {"_arrow_Date32__initialize", (DL_FUNC) &_arrow_Date32__initialize, 0},
    {"_arrow_Date64__initialize", (DL_FUNC) &_arrow_Date64__initialize, 0},
    {"_arrow_Null__initialize", (DL_FUNC) &_arrow_Null__initialize, 0},
    {"_arrow_Decimal128Type__initialize", (DL_FUNC) &_arrow_Decimal128Type__initialize, 2},
    {"_arrow_FixedSizeBinary__initialize", (DL_FUNC) &_arrow_FixedSizeBinary__initialize, 1},
    {"_arrow_Timestamp__initialize1", (DL_FUNC) &_arrow_Timestamp__initialize1, 1},
    {"_arrow_Timestamp__initialize2", (DL_FUNC) &_arrow_Timestamp__initialize2, 2},
    {"_arrow_Time32__initialize", (DL_FUNC) &_arrow_Time32__initialize, 1},
    {"_arrow_Time64__initialize", (DL_FUNC) &_arrow_Time64__initialize, 1},
    {"_arrow_list__", (DL_FUNC) &_arrow_list__, 1},
    {"_arrow_struct_", (DL_FUNC) &_arrow_struct_, 1},
    {"_arrow_DataType__ToString", (DL_FUNC) &_arrow_DataType__ToString, 1},
    {"_arrow_DataType__name", (DL_FUNC) &_arrow_DataType__name, 1},
    {"_arrow_DataType__Equals", (DL_FUNC) &_arrow_DataType__Equals, 2},
    {"_arrow_DataType__num_children", (DL_FUNC) &_arrow_DataType__num_children, 1},
    {"_arrow_DataType__children_pointer", (DL_FUNC) &_arrow_DataType__children_pointer, 1},
    {"_arrow_DataType__id", (DL_FUNC) &_arrow_DataType__id, 1},
    {"_arrow_schema_", (DL_FUNC) &_arrow_schema_, 1},
    {"_arrow_Schema__ToString", (DL_FUNC) &_arrow_Schema__ToString, 1},
    {"_arrow_Schema__num_fields", (DL_FUNC) &_arrow_Schema__num_fields, 1},
    {"_arrow_Schema__field", (DL_FUNC) &_arrow_Schema__field, 2},
    {"_arrow_Schema__names", (DL_FUNC) &_arrow_Schema__names, 1},
    {"_arrow_ListType__ToString", (DL_FUNC) &_arrow_ListType__ToString, 1},
    {"_arrow_FixedWidthType__bit_width", (DL_FUNC) &_arrow_FixedWidthType__bit_width, 1},
    {"_arrow_DateType__unit", (DL_FUNC) &_arrow_DateType__unit, 1},
    {"_arrow_TimeType__unit", (DL_FUNC) &_arrow_TimeType__unit, 1},
    {"_arrow_DecimalType__precision", (DL_FUNC) &_arrow_DecimalType__precision, 1},
    {"_arrow_DecimalType__scale", (DL_FUNC) &_arrow_DecimalType__scale, 1},
    {"_arrow_TimestampType__timezone", (DL_FUNC) &_arrow_TimestampType__timezone, 1},
    {"_arrow_TimestampType__unit", (DL_FUNC) &_arrow_TimestampType__unit, 1},
    {"_arrow_DictionaryType__initialize", (DL_FUNC) &_arrow_DictionaryType__initialize, 3},
    {"_arrow_DictionaryType__index_type", (DL_FUNC) &_arrow_DictionaryType__index_type, 1},
    {"_arrow_DictionaryType__name", (DL_FUNC) &_arrow_DictionaryType__name, 1},
    {"_arrow_DictionaryType__dictionary", (DL_FUNC) &_arrow_DictionaryType__dictionary, 1},
    {"_arrow_DictionaryType__ordered", (DL_FUNC) &_arrow_DictionaryType__ordered, 1},
    {"_arrow_ipc___feather___TableWriter__SetDescription", (DL_FUNC) &_arrow_ipc___feather___TableWriter__SetDescription, 2},
    {"_arrow_ipc___feather___TableWriter__SetNumRows", (DL_FUNC) &_arrow_ipc___feather___TableWriter__SetNumRows, 2},
    {"_arrow_ipc___feather___TableWriter__Append", (DL_FUNC) &_arrow_ipc___feather___TableWriter__Append, 3},
    {"_arrow_ipc___feather___TableWriter__Finalize", (DL_FUNC) &_arrow_ipc___feather___TableWriter__Finalize, 1},
    {"_arrow_ipc___feather___TableWriter__Open", (DL_FUNC) &_arrow_ipc___feather___TableWriter__Open, 1},
    {"_arrow_ipc___TableWriter__RecordBatch__WriteFeather", (DL_FUNC) &_arrow_ipc___TableWriter__RecordBatch__WriteFeather, 2},
    {"_arrow_ipc___feather___TableReader__GetDescription", (DL_FUNC) &_arrow_ipc___feather___TableReader__GetDescription, 1},
    {"_arrow_ipc___feather___TableReader__HasDescription", (DL_FUNC) &_arrow_ipc___feather___TableReader__HasDescription, 1},
    {"_arrow_ipc___feather___TableReader__version", (DL_FUNC) &_arrow_ipc___feather___TableReader__version, 1},
    {"_arrow_ipc___feather___TableReader__num_rows", (DL_FUNC) &_arrow_ipc___feather___TableReader__num_rows, 1},
    {"_arrow_ipc___feather___TableReader__num_columns", (DL_FUNC) &_arrow_ipc___feather___TableReader__num_columns, 1},
    {"_arrow_ipc___feather___TableReader__GetColumnName", (DL_FUNC) &_arrow_ipc___feather___TableReader__GetColumnName, 2},
    {"_arrow_ipc___feather___TableReader__GetColumn", (DL_FUNC) &_arrow_ipc___feather___TableReader__GetColumn, 2},
    {"_arrow_ipc___feather___TableReader__Read", (DL_FUNC) &_arrow_ipc___feather___TableReader__Read, 2},
    {"_arrow_ipc___feather___TableReader__Open", (DL_FUNC) &_arrow_ipc___feather___TableReader__Open, 1},
    {"_arrow_Field__initialize", (DL_FUNC) &_arrow_Field__initialize, 3},
    {"_arrow_Field__ToString", (DL_FUNC) &_arrow_Field__ToString, 1},
    {"_arrow_Field__name", (DL_FUNC) &_arrow_Field__name, 1},
    {"_arrow_Field__Equals", (DL_FUNC) &_arrow_Field__Equals, 2},
    {"_arrow_Field__nullable", (DL_FUNC) &_arrow_Field__nullable, 1},
    {"_arrow_Field__type", (DL_FUNC) &_arrow_Field__type, 1},
    {"_arrow_io___Readable__Read", (DL_FUNC) &_arrow_io___Readable__Read, 2},
    {"_arrow_io___InputStream__Close", (DL_FUNC) &_arrow_io___InputStream__Close, 1},
    {"_arrow_io___OutputStream__Close", (DL_FUNC) &_arrow_io___OutputStream__Close, 1},
    {"_arrow_io___RandomAccessFile__GetSize", (DL_FUNC) &_arrow_io___RandomAccessFile__GetSize, 1},
    {"_arrow_io___RandomAccessFile__supports_zero_copy", (DL_FUNC) &_arrow_io___RandomAccessFile__supports_zero_copy, 1},
    {"_arrow_io___RandomAccessFile__Seek", (DL_FUNC) &_arrow_io___RandomAccessFile__Seek, 2},
    {"_arrow_io___RandomAccessFile__Tell", (DL_FUNC) &_arrow_io___RandomAccessFile__Tell, 1},
    {"_arrow_io___MemoryMappedFile__Create", (DL_FUNC) &_arrow_io___MemoryMappedFile__Create, 2},
    {"_arrow_io___MemoryMappedFile__Open", (DL_FUNC) &_arrow_io___MemoryMappedFile__Open, 2},
    {"_arrow_io___MemoryMappedFile__Resize", (DL_FUNC) &_arrow_io___MemoryMappedFile__Resize, 2},
    {"_arrow_io___ReadableFile__Open", (DL_FUNC) &_arrow_io___ReadableFile__Open, 1},
    {"_arrow_io___BufferReader__initialize", (DL_FUNC) &_arrow_io___BufferReader__initialize, 1},
    {"_arrow_io___Writable__write", (DL_FUNC) &_arrow_io___Writable__write, 2},
    {"_arrow_io___OutputStream__Tell", (DL_FUNC) &_arrow_io___OutputStream__Tell, 1},
    {"_arrow_io___FileOutputStream__Open", (DL_FUNC) &_arrow_io___FileOutputStream__Open, 1},
    {"_arrow_io___BufferOutputStream__Create", (DL_FUNC) &_arrow_io___BufferOutputStream__Create, 1},
    {"_arrow_io___BufferOutputStream__capacity", (DL_FUNC) &_arrow_io___BufferOutputStream__capacity, 1},
    {"_arrow_io___BufferOutputStream__Finish", (DL_FUNC) &_arrow_io___BufferOutputStream__Finish, 1},
    {"_arrow_io___BufferOutputStream__Tell", (DL_FUNC) &_arrow_io___BufferOutputStream__Tell, 1},
    {"_arrow_io___BufferOutputStream__Write", (DL_FUNC) &_arrow_io___BufferOutputStream__Write, 2},
    {"_arrow_io___MockOutputStream__initialize", (DL_FUNC) &_arrow_io___MockOutputStream__initialize, 0},
    {"_arrow_io___MockOutputStream__GetExtentBytesWritten", (DL_FUNC) &_arrow_io___MockOutputStream__GetExtentBytesWritten, 1},
    {"_arrow_io___FixedSizeBufferWriter__initialize", (DL_FUNC) &_arrow_io___FixedSizeBufferWriter__initialize, 1},
    {"_arrow_MemoryPool__default", (DL_FUNC) &_arrow_MemoryPool__default, 0},
    {"_arrow_MemoryPool__bytes_allocated", (DL_FUNC) &_arrow_MemoryPool__bytes_allocated, 1},
    {"_arrow_MemoryPool__max_memory", (DL_FUNC) &_arrow_MemoryPool__max_memory, 1},
    {"_arrow_ipc___Message__body_length", (DL_FUNC) &_arrow_ipc___Message__body_length, 1},
    {"_arrow_ipc___Message__metadata", (DL_FUNC) &_arrow_ipc___Message__metadata, 1},
    {"_arrow_ipc___Message__body", (DL_FUNC) &_arrow_ipc___Message__body, 1},
    {"_arrow_ipc___Message__Verify", (DL_FUNC) &_arrow_ipc___Message__Verify, 1},
    {"_arrow_ipc___Message__type", (DL_FUNC) &_arrow_ipc___Message__type, 1},
    {"_arrow_ipc___Message__Equals", (DL_FUNC) &_arrow_ipc___Message__Equals, 2},
    {"_arrow_ipc___ReadRecordBatch__Message__Schema", (DL_FUNC) &_arrow_ipc___ReadRecordBatch__Message__Schema, 2},
    {"_arrow_ipc___ReadSchema_InputStream", (DL_FUNC) &_arrow_ipc___ReadSchema_InputStream, 1},
    {"_arrow_ipc___MessageReader__Open", (DL_FUNC) &_arrow_ipc___MessageReader__Open, 1},
    {"_arrow_ipc___MessageReader__ReadNextMessage", (DL_FUNC) &_arrow_ipc___MessageReader__ReadNextMessage, 1},
    {"_arrow_ipc___ReadMessage", (DL_FUNC) &_arrow_ipc___ReadMessage, 1},
    {"_arrow_read_parquet_file", (DL_FUNC) &_arrow_read_parquet_file, 1},
    {"_arrow_RecordBatch__num_columns", (DL_FUNC) &_arrow_RecordBatch__num_columns, 1},
    {"_arrow_RecordBatch__num_rows", (DL_FUNC) &_arrow_RecordBatch__num_rows, 1},
    {"_arrow_RecordBatch__schema", (DL_FUNC) &_arrow_RecordBatch__schema, 1},
    {"_arrow_RecordBatch__columns", (DL_FUNC) &_arrow_RecordBatch__columns, 1},
    {"_arrow_RecordBatch__column", (DL_FUNC) &_arrow_RecordBatch__column, 2},
    {"_arrow_RecordBatch__from_dataframe", (DL_FUNC) &_arrow_RecordBatch__from_dataframe, 1},
    {"_arrow_RecordBatch__Equals", (DL_FUNC) &_arrow_RecordBatch__Equals, 2},
    {"_arrow_RecordBatch__RemoveColumn", (DL_FUNC) &_arrow_RecordBatch__RemoveColumn, 2},
    {"_arrow_RecordBatch__column_name", (DL_FUNC) &_arrow_RecordBatch__column_name, 2},
    {"_arrow_RecordBatch__names", (DL_FUNC) &_arrow_RecordBatch__names, 1},
    {"_arrow_RecordBatch__Slice1", (DL_FUNC) &_arrow_RecordBatch__Slice1, 2},
    {"_arrow_RecordBatch__Slice2", (DL_FUNC) &_arrow_RecordBatch__Slice2, 3},
    {"_arrow_ipc___SerializeRecordBatch__Raw", (DL_FUNC) &_arrow_ipc___SerializeRecordBatch__Raw, 1},
    {"_arrow_ipc___ReadRecordBatch__InputStream__Schema", (DL_FUNC) &_arrow_ipc___ReadRecordBatch__InputStream__Schema, 2},
    {"_arrow_RecordBatchReader__schema", (DL_FUNC) &_arrow_RecordBatchReader__schema, 1},
    {"_arrow_RecordBatchReader__ReadNext", (DL_FUNC) &_arrow_RecordBatchReader__ReadNext, 1},
    {"_arrow_ipc___RecordBatchStreamReader__Open", (DL_FUNC) &_arrow_ipc___RecordBatchStreamReader__Open, 1},
    {"_arrow_ipc___RecordBatchStreamReader__batches", (DL_FUNC) &_arrow_ipc___RecordBatchStreamReader__batches, 1},
    {"_arrow_ipc___RecordBatchFileReader__schema", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__schema, 1},
    {"_arrow_ipc___RecordBatchFileReader__num_record_batches", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__num_record_batches, 1},
    {"_arrow_ipc___RecordBatchFileReader__ReadRecordBatch", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__ReadRecordBatch, 2},
    {"_arrow_ipc___RecordBatchFileReader__Open", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__Open, 1},
    {"_arrow_Table__from_RecordBatchFileReader", (DL_FUNC) &_arrow_Table__from_RecordBatchFileReader, 1},
    {"_arrow_Table__from_RecordBatchStreamReader", (DL_FUNC) &_arrow_Table__from_RecordBatchStreamReader, 1},
    {"_arrow_ipc___RecordBatchFileReader__batches", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__batches, 1},
    {"_arrow_ipc___RecordBatchWriter__WriteRecordBatch", (DL_FUNC) &_arrow_ipc___RecordBatchWriter__WriteRecordBatch, 2},
    {"_arrow_ipc___RecordBatchWriter__WriteTable", (DL_FUNC) &_arrow_ipc___RecordBatchWriter__WriteTable, 2},
    {"_arrow_ipc___RecordBatchWriter__Close", (DL_FUNC) &_arrow_ipc___RecordBatchWriter__Close, 1},
    {"_arrow_ipc___RecordBatchFileWriter__Open", (DL_FUNC) &_arrow_ipc___RecordBatchFileWriter__Open, 2},
    {"_arrow_ipc___RecordBatchStreamWriter__Open", (DL_FUNC) &_arrow_ipc___RecordBatchStreamWriter__Open, 2},
    {"_arrow_Table__from_dataframe", (DL_FUNC) &_arrow_Table__from_dataframe, 1},
    {"_arrow_Table__num_columns", (DL_FUNC) &_arrow_Table__num_columns, 1},
    {"_arrow_Table__num_rows", (DL_FUNC) &_arrow_Table__num_rows, 1},
    {"_arrow_Table__schema", (DL_FUNC) &_arrow_Table__schema, 1},
    {"_arrow_Table__column", (DL_FUNC) &_arrow_Table__column, 2},
    {"_arrow_Table__columns", (DL_FUNC) &_arrow_Table__columns, 1},
    {"_arrow_GetCpuThreadPoolCapacity", (DL_FUNC) &_arrow_GetCpuThreadPoolCapacity, 0},
    {"_arrow_SetCpuThreadPoolCapacity", (DL_FUNC) &_arrow_SetCpuThreadPoolCapacity, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_arrow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
